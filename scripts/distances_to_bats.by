import argparse
import numpy as np
from treetime import TreeAnc
from Bio import AlignIO
from collections import defaultdict


if __name__=="__main__":
    parser = argparse.ArgumentParser(
        description="calculate distances to bat sequednces",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument('--aln', type=str, required=False, help="nucleotide alignment")
    parser.add_argument('--tree', type=str, required=False, help="tree")
    parser.add_argument('--bat-sequences', type=str, required=True, help="bat sequence aligment")
    parser.add_argument('--output', type=str, required=True, help="output tsv file")
    args = parser.parse_args()

    comparison_seqs = {s.id: np.array(s) for s in AlignIO.read(args.bat_sequences, 'fasta')}

    tt = TreeAnc(tree = args.tree, aln=args.aln, gtr='JC69')

    tt.infer_ancestral_sequences(reconstruct_tip_states=True)

    distance = defaultdict(dict)
    comp_seq_name = 'hCoV-19/bat/Yunnan/RaTG13/2013|EPI_ISL_402131|2013-07-24'
    short_name = comp_seq_name.split('|')[0].split('/')[-2]
    comp_seq = comparison_seqs[comp_seq_name]
    mindist = 30000
    mindist_terminal = 30000
    for n in tt.tree.find_clades():
        dist = np.sum(tt.sequence(n, reconstructed=True, as_string=False)!=comp_seq)
        if dist<=mindist:
            print(n.name, dist)
            mindist=dist
        if dist<=mindist_terminal:
            print(n.name, dist)
            mindist_terminal=dist
        distance[n.name][f"distance_{comp_seq_name}"] =  dist

    import json
    with open(args.output, 'w') as fh:
        json.dump({"nodes": distance}, fh)

